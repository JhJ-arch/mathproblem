import type { Difficulty } from './types';

export const MATH_CONCEPTS: Record<string, Record<string, Record<string, string[]>>> = {
  '3학년': {
    '1학기': {
      '덧셈과 뺄셈': ['세 자리 수의 덧셈', '세 자리 수의 뺄셈', '덧셈과 뺄셈의 관계 및 어림셈'],
      '나눗셈': ['나눗셈의 의미와 몫 구하기', '(두 자리 수) ÷ (한 자리 수)', '나눗셈 계산 확인'],
      '곱셈': ['(두 자리 수) × (한 자리 수)'],
      '분수와 소수': ['분수로 나타내기', '단위분수 및 분수 크기 비교', '소수 한 자리 수'],
    },
    '2학기': {
      '곱셈': ['(세 자리 수) × (한 자리 수)'],
      '나눗셈': ['(몇십) ÷ (몇십)', '(세 자리 수) ÷ (한 자리 수)'],
      '분수': ['진분수, 가분수, 대분수', '가분수와 대분수 관계', '분수의 크기 비교'],
      '자료의 정리': ['그림그래프'],
    },
  },
  '4학년': {
    '1학기': {
        '큰 수': ['다섯 자리 이상의 수 (만, 십만, 백만, 천만)', '억, 조 단위의 수', '수의 크기 비교 및 띄어 세기'],
        '곱셈과 나눗셈': ['(세 자리 수) × (두 자리 수)', '(세 자리 수) ÷ (두 자리 수)', '계산 결과 어림하기'],
        '막대그래프': ['막대그래프 이해 및 그리기'],
        '규칙 찾기': ['수의 배열에서 규칙 찾기', '도형의 배열 및 계산식에서 규칙 찾기'],
    },
    '2학기': {
        '분수의 덧셈과 뺄셈': ['분모가 같은 분수의 덧셈과 뺄셈'],
        '소수의 덧셈과 뺄셈': ['소수 두/세 자리 수', '소수의 덧셈', '소수의 뺄셈'],
        '꺾은선그래프': ['꺾은선그래프 이해 및 그리기'],
    }
  },
  '5학년': {
    '1학기': {
        '자연수의 혼합 계산': ['덧셈, 뺄셈, 곱셈, 나눗셈 혼합 계산', '괄호가 있는 식의 계산'],
        '약수와 배수': ['약수와 공약수, 최대공약수', '배수와 공배수, 최소공배수'],
        '규칙과 대응': ['두 양 사이의 대응 관계 찾기 및 식으로 나타내기'],
        '약분과 통분': ['크기가 같은 분수 만들기', '분수의 약분과 통분', '분모가 다른 분수의 크기 비교'],
        '분수의 덧셈과 뺄셈': ['분모가 다른 분수의 덧셈과 뺄셈'],
    },
    '2학기': {
        '수의 범위와 어림하기': ['이상, 이하, 초과, 미만', '올림, 버림, 반올림'],
        '분수의 곱셈': ['(분수) × (자연수)', '(자연수) × (분수)', '(진분수) × (진분수)', '(대분수) × (대분수)', '세 분수의 곱셈'],
        '소수의 곱셈': ['(소수) × (자연수)', '(자연수) × (소수)', '곱의 소수점 위치'],
        '평균과 가능성': ['평균 구하기', '가능성을 말과 수로 표현하기'],
    }
  },
  '6학년': {
    '1학기': {
        '분수의 나눗셈': ['(자연수) ÷ (자연수)의 몫을 분수로', '(분수) ÷ (자연수)'],
        '소수의 나눗셈': ['(소수) ÷ (자연수)', '몫이 소수인 (자연수) ÷ (자연수)'],
        '비와 비율': ['비(Ratio)와 비율', '백분율', '비율이 사용되는 경우'],
    },
    '2학기': {
        '분수의 나눗셈': ['(분수) ÷ (분수)', '(자연수) ÷ (분수)'],
        '소수의 나눗셈': ['(소수) ÷ (소수)', '몫을 반올림하여 나타내기'],
        '비례식과 비례배분': ['비의 성질', '비례식', '비례배분'],
        '정비례와 반비례': ['정비례와 반비례 관계 알아보기'],
    }
  },
};


export const GRADES = Object.keys(MATH_CONCEPTS);

export const DIFFICULTY_LEVELS: { value: Difficulty, label: string }[] = [
    { value: 'Conceptual', label: '1단계: 개념 확인' },
    { value: 'Applied', label: '2단계: 응용' },
    { value: 'Advanced', label: '3단계: 심화' },
];

export const DIFFICULTY_DESCRIPTIONS: Record<Difficulty, string> = {
    Conceptual: `
      목표: 학생이 특정 수학적 개념(예: 덧셈의 합병 상황)이 어떤 이야기 상황에 해당하는지 인식하고, 그것을 올바른 수학적 식으로 표현할 수 있는지 확인하는 단계입니다. '무엇을 해야 하는가?'를 아는 것이 핵심입니다.
      - 직관적인 상황 제시: 문제의 이야기가 해당 개념의 전형적인 예시여야 합니다. 뺄셈-제거 상황이라면 '사라지고 남은 것'을 묻는 등, 개념과 상황이 직접적으로 연결되어야 합니다.
      - 단일 연산 구조: 문제는 반드시 한 번의 계산으로 해결할 수 있어야 합니다. 두 가지 이상의 개념을 복합적으로 사용하지 않습니다.
      - 핵심 정보만 제공: 문제 해결에 필요 없는 불필요한 숫자나 정보(distractor)를 포함하지 않습니다. 모든 정보는 문제 풀이에 직접적으로 사용되어야 합니다.
      - 단순한 수 사용: 계산 능력보다는 개념 이해를 평가하는 것이 목적이므로, 학생들이 암산이나 간단한 계산으로 풀 수 있는 수를 사용합니다.
      - 명확한 질문: "모두 몇 개?", "남은 것은 몇 개?", "차이는 얼마?"와 같이 무엇을 구해야 하는지 명확하게 질문합니다.
    `,
    Applied: `
      목표: 학생이 학습한 개념을 하나의 '도구'로 사용하여 조금 더 복잡한 문제를 해결할 수 있는지 확인하는 단계입니다. 단순히 개념을 인식하는 것을 넘어, 문제 상황을 분석하고 절차에 맞게 적용하는 능력을 평가합니다.
      - 두 단계 이상의 연산: 가장 대표적인 유형으로, 두 가지 이상의 계산 과정을 거쳐야 답을 구할 수 있습니다. (예: 덧셈 후 뺄셈, 곱셈 후 덧셈 등)
      - 숨겨진 정보 포함: 문제에 필요한 정보 중 하나를 직접 제시하지 않고, 간단한 계산을 통해 먼저 구하도록 만듭니다. (예: "사과 3상자와 낱개 5개가 있습니다. 한 상자에는 10개씩 들어있다면 사과는 모두 몇 개일까요?" → 10x3을 먼저 계산해야 함)
      - 계산 능력 요구: 암산만으로는 풀기 어려운, 자릿수가 높거나 받아올림/내림이 복잡한 수를 사용하여 배운 계산 절차를 정확히 수행하는지 평가합니다.
      - 불필요한 정보 포함: 문제 해결과 관련 없는 정보를 의도적으로 포함하여, 학생이 필요한 정보를 스스로 선별하는 능력을 평가합니다.
      - 조건의 추가: 기본적인 상황에 "만약 ~라면?"과 같은 간단한 조건을 추가하여 상황을 좀 더 구체적으로 만듭니다.
    `,
    Advanced: `
      목표: 학생이 수학적 관계를 깊이 추론하고, 다양한 전략을 탐색하며, 문제 해결 과정을 논리적으로 설명할 수 있는지 확인하는 단계입니다. 정해진 길을 따라가는 것이 아니라, 스스로 길을 찾거나 새로운 길을 만들어내는 수학적 사고력을 평가합니다.
      - 역연산 및 거꾸로 풀기: 결과값을 알려주고 과정의 일부나 처음 값을 추론하게 만듭니다. 이는 덧셈과 뺄셈, 곱셈과 나눗셈의 관계를 깊이 이해해야 풀 수 있습니다. (예: "민준이가 가진 구슬 중 8개를 친구에게 주었더니 15개가 남았습니다. 민준이가 처음에 가지고 있던 구슬은 몇 개일까요?")
      - 비구조화된 문제 또는 여러 답이 가능한 문제: 정답이 하나로 정해지지 않거나, 여러 개의 답이 나올 수 있는 개방형 문제를 제시합니다. 또는 조건을 만족하는 모든 경우를 찾게 합니다. (예: "두 자리 수 두 개를 더했더니 87이 되었습니다. 가능한 덧셈식을 모두 찾아보세요.")
      - 패턴 분석 및 일반화: 문제 속에 숨겨진 규칙을 발견하고, 이를 이용해 특정 순서의 값을 예측하게 합니다. 이는 함수적 사고의 기초가 됩니다.
      - 개념의 통합: 서로 다른 단원의 개념을 융합해야 해결할 수 있는 문제를 제시합니다. (예: 약수와 배수 개념 + 도형의 넓이 개념)
      - 문제 만들기 또는 조건 분석: "다음 식에 알맞은 이야기를 만들어 보세요." 와 같이 학생이 직접 문제를 만들게 하거나, "이 문제를 풀기 위해 더 필요한 정보는 무엇일까요?" 와 같이 문제의 조건을 분석하게 합니다.
    `,
};